##############################################################################
#
# Deploy
#   This is the GitHub Action configuration file for deploying the application
#   to the virtual private server. This action will automatically be performed
#   whenever changes are pushed to the production branche.
#
##############################################################################

# Name this GitHub Action.
name: Deploy

# Here we can define when we want this action to happen. We currently want this
# specific action to run only when changes are pushed to the production branch.
on:
  push:
    branches:
    - production

# Here we define what jobs this action must perform.
jobs:

  # test:
  #   name: Test client

  #   runs-on: ubuntu-latest
  #   container: node:17-alpine

  #   steps:
  #   - name: "Checkout repository"
  #     uses: actions/checkout@v3

  #   - name: "Install package manager"
  #     run: npm i -g npm@latest

  #   - name: "Install client dependencies"
  #     uses: bahmutov/npm-install@v1
  #     with:
  #       working-directory: client

  #   - name: "Run client tests"
  #     run: npm test
  #     working-directory: client

  build:
    name: Build and deploy the application.
    # needs: test

    runs-on: ubuntu-latest

    steps:
    - name: "Set env"
      run: echo "IMAGE_NAME=$(echo $secrets.DOCKERHUB_USERNAME)" >> $GITHUB_ENV

    - name: "Read env"
      run: echo ${{ env.IMAGE_NAME }}

    - name: "Login to Docker Hub"
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: "Checkout repository"
      uses: actions/checkout@v3

    - name: "Build image"
      run: docker-compose up -t $(IMAGE_NAME)

    - name: "Push image to Docker Hub"
      run: docker push $(IMAGE_NAME)

    # # First, we need to make sure that the virtual private server is updated to
    # # the latest version of the repository.
    # - name: Copy repository contents through SCP
    #   uses: appleboy/scp-action@master
    #   env:
    #     HOST: ${{ secrets.HOST }}
    #     USERNAME: ${{ secrets.USER }}
    #     PORT: ${{ secrets.PORT }}
    #     KEY: ${{ secrets.KEY }}
    #   with:
    #     source: "."
    #     target: "/var/www/tasks"

    # # Next, we need to execute some actions. We need to navigate to the right
    # # directory for our repository and rebuild the Docker Compose network.
    # - name: Execute remote command through SSH
    #   uses: appleboy/ssh-action@master
    #   with:
    #     HOST: ${{ secrets.HOST }}
    #     USERNAME: ${{ secrets.USER }}
    #     PORT: ${{ secrets.PORT }}
    #     KEY: ${{ secrets.KEY }}
    #     script: |
    #       cd /var/www/tasks
    #       docker-compose up -d --build