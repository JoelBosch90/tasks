version: "3.5"

# We want to spawn several separate services from Docker images and manage all
# of them from this file.
services:

  ##############################################################################
  #
  # Proxy
  #   We use Nginx as a reverse proxy to direct requests to the ports of the
  #   correct services. This way we can hide the application's inner network.
  #
  ##############################################################################
  proxy:
    container_name: tasks.proxy.production

    # We can use the latest version of Nginx.
    image: nginx:latest
    
    # We always want to restart when things go wrong.
    restart: always

    # We want to expose at port 8008.
    ports:
      - 8008:80

    # We can use volumes to copy our reverse proxy configuration into Nginx.
    volumes:
      # Use the production configuration to expose only what's necessary.
      - ./proxy/production.conf:/etc/nginx/nginx.conf
      - ./proxy/logs:/etc/nginx/error_log.log

      # Temporary line to help Nginx serve the static files.
      - ./client/static:/usr/share/nginx/html

    # The proxy needs access to the publicly accessible services.
    depends_on:
      - client

  ##############################################################################
  #
  # Client
  #   This is the service that serves all client-side files.
  #
  ##############################################################################
  client:
    container_name: tasks.client.production

    # We always want to restart when things go wrong.
    restart: always

    # We want to build from the production dockerfile in the client directory.
    build:
      context: ./client/
      dockerfile: production.dockerfile

    # Pass on the environment variables to the client service.
    environment:
    
      # Tell the client what port to use.
      - PORT=8000

    # We can expose the client service in the container network.
    expose:
      - "8000"